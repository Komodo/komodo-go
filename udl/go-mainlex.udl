# UDL (Komodo language lexing) for the Go language.

language Go

family markup
initial IN_M_DEFAULT

# Need to get into a state with keywords -- use SSL
state IN_M_DEFAULT:
/./ : redo, => IN_SSL_DEFAULT

family ssl # client-side language

# We have to specify the min and max styles we'll be referring to

start_style SSL_DEFAULT
end_style SSL_VARIABLE

# If the language has keywords, specify which style needs to be transformed

keyword_style SSL_IDENTIFIER => SSL_WORD

keywords [
            # Keywords
            "break",
            "default",
            "func",
            "interface",
            "select",
            "case",
            "defer",
            "go",
            "map",
            "struct",
            "chan",
            "else",
            "goto",
            "package",
            "switch",
            "const",
            "fallthrough",
            "if",
            "range",
            "type",
            "continue",
            "for",
            "import",
            "return",
            "var",
        ]

# Some info on the styles we're using here

pattern NMSTART = '_a-zA-Z\x80-\xff'   # inside cset
pattern NMCHAR = '$NMSTART\d'   # inside cset
pattern CS = '\w\d_\x80-\xff'   # inside cset
pattern WS = '\s\t\r\n'           # inside cset
pattern OP = '!\#%&\(\)\*\+,-\.\/:;<=>\?@\[\]\^\{\}~|'


state IN_SSL_DEFAULT:

# One-line comments end at either end-of-line or '?>'
# This is a hard-wired transition

'//' : paint(upto, SSL_DEFAULT),  => IN_SSL_COMMENT_1

'/*' : paint(upto, SSL_DEFAULT), => IN_SSL_COMMENT_2
/\$[$NMSTART][$CS]*/ : paint(upto, SSL_DEFAULT), paint(include, SSL_VARIABLE)

/[$WS]+/  : #stay

'"' : paint(upto, SSL_DEFAULT), => IN_SSL_DSTRING
'\'' : paint(upto, SSL_DEFAULT), => IN_SSL_SSTRING


# Go process a number, try to do it in regexes
# octal and hex first
/0[Xx][0-9a-fA-F]+/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)
/[-+]?0[0-7]*/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)
/[1-9]/ : paint(upto, SSL_DEFAULT), => IN_SSL_NUMBER_1
/\.(?=[$NMSTART])/ : paint(upto, SSL_DEFAULT), paint(include, SSL_OPERATOR), \
=> IN_SSL_NON_KEYWORD_IDENTIFIER_1
/\.(?=\d)/ : paint(upto, SSL_DEFAULT), => IN_SSL_NUMBER_2

/[$NMSTART][$CS]*/ : paint(upto, SSL_DEFAULT), paint(include, SSL_IDENTIFIER)

# Now a bunch of operators
# Multi-char operators first

#XXX Support high-bit characters in delimiter strings.

/[$OP]/ : paint(upto, SSL_DEFAULT), redo, => IN_SSL_OP1


################ Non-keyword identifiers ################

state IN_SSL_NON_KEYWORD_IDENTIFIER_1:
/./ : no_keyword, paint(include, SSL_IDENTIFIER), => IN_SSL_NON_KEYWORD_IDENTIFIER_2

state IN_SSL_NON_KEYWORD_IDENTIFIER_2:
/[$CS]/ : #stay
/[^$CS]/ : paint(upto, SSL_IDENTIFIER), redo, no_keyword, => IN_SSL_DEFAULT

################ Comments ################

state IN_SSL_COMMENT_1 : 
/[\r\n]/ : paint(upto, SSL_COMMENT), => IN_SSL_DEFAULT

state IN_SSL_COMMENT_2 : 
'*/' : paint(include, SSL_COMMENTBLOCK), => IN_SSL_DEFAULT

################ Strings ################

state IN_SSL_DSTRING:
/\$[$NMSTART][$NMCHAR]*/: paint(upto, SSL_STRING), paint(include, SSL_VARIABLE) #stay
'"' : paint(include, SSL_STRING), => IN_SSL_DEFAULT
/\\./ : #stay, Don't miscount backslash at end
/[\r\n]/ : #stay, php strings are multi-line
/\z/: paint(include, SSL_STRING)

state IN_SSL_SSTRING:
'\'' : paint(include, SSL_STRING), => IN_SSL_DEFAULT
/\\./ : #
/[\r\n]/ : #stay, php strings are multi-line
# Verify we create a \z

################ Numbers ################

state IN_SSL_NUMBER_1 :
/$/ : paint(upto, SSL_NUMBER), => IN_SSL_DEFAULT
'.' : => IN_SSL_NUMBER_2
/[\d]/ : #stay
/[Ee][-+]?/ : => IN_SSL_NUMBER_3
/./ : paint(upto, SSL_NUMBER), redo, => IN_SSL_DEFAULT

state IN_SSL_NUMBER_2:
/$/ : paint(upto, SSL_NUMBER), => IN_SSL_DEFAULT
/[\d]/ : #stay
/[Ee][-+]?/ : => IN_SSL_NUMBER_3
'.' : paint(upto, SSL_NUMBER), paint(include, SSL_OPERATOR),  => IN_SSL_DEFAULT
/./ : paint(upto, SSL_NUMBER), redo, => IN_SSL_DEFAULT

state IN_SSL_NUMBER_3:
/$/ : paint(upto, SSL_NUMBER), => IN_SSL_DEFAULT
/[^\d]/ : paint(upto, SSL_NUMBER), redo, => IN_SSL_DEFAULT

################ Operators ################

# If we're here, we've painted the previous part, and 
# just need to figure out which operator we have, doing
# greedy left-to-right matching ('+++' parses as /++/, /+/)

state IN_SSL_OP1:
# Single-char operator -- all ops work as standalone chars

# Single-char operator -- all ops work as standalone chars
/[$OP](?:(?![$OP])|$)/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/==?=?/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/!=?=?/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/<<=?/	 : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/>>=?/	 : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/[-<>+\*\/\.%&|\^]=?/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/([-\+\&|])\1?/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
# The fallback
/[$OP]/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT

################ End States ################

# Fold info

fold "{" SSL_OPERATOR +
fold "}" SSL_OPERATOR -

#TODO: fold on parens too?
